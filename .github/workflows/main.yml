on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

name: Build and Deploy Affected Services

jobs:
  build:
    name: Determine, Build, and Deploy Affected Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Identify Affected Services
        id: affected-services
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files: $CHANGED_FILES"

          # Determine affected services
          AFFECTED_SERVICES=""
          if echo "$CHANGED_FILES" | grep -q "^services/tasks/"; then
            AFFECTED_SERVICES="${AFFECTED_SERVICES} tasks"
          fi
          if echo "$CHANGED_FILES" | grep -q "^services/users/"; then
            AFFECTED_SERVICES="${AFFECTED_SERVICES} users"
          fi
          if echo "$CHANGED_FILES" | grep -q "^fe/"; then
            AFFECTED_SERVICES="${AFFECTED_SERVICES} frontend"
          fi
          if echo "$CHANGED_FILES" | grep -q "^infra/"; then
            AFFECTED_SERVICES="frontend users tasks"
          fi
          if echo "$CHANGED_FILES" | grep -q "^.github/workflows/"; then
            AFFECTED_SERVICES="frontend users tasks"
          fi
          echo "Affected services: $AFFECTED_SERVICES"
          echo "services=$AFFECTED_SERVICES" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Cognito UI Link from SSM
        id: get-ssm-parameter
        run: |
          COGNITO_UI_LINK=$(aws ssm get-parameter --name "/cognito_ui" --query "Parameter.Value" --output text)
          echo "COGNITO_UI_LINK=$COGNITO_UI_LINK" >> $GITHUB_ENV
          COGNITO_LOGOUT_LINK=$(aws ssm get-parameter --name "/cognito_logout" --query "Parameter.Value" --output text)
          echo "COGNITO_LOGOUT_LINK=$COGNITO_LOGOUT_LINK" >> $GITHUB_ENV

      - name: Build and Push Images
        if: contains(env.services, 'tasks') || contains(env.services, 'users') || contains(env.services, 'frontend')
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          COGNITO_UI_LINK: ${{ env.COGNITO_UI_LINK }}
          COGNITO_LOGOUT_LINK: ${{ env.COGNITO_LOGOUT_LINK }}
        run: |
          for SERVICE in ${{ env.services }}; do
            case $SERVICE in
              "tasks")
                docker build -t $ECR_REGISTRY/tasks-repo:${{ github.sha }} ./services/tasks
                docker push $ECR_REGISTRY/tasks-repo:${{ github.sha }}
                ;;
              "users")
                docker build -t $ECR_REGISTRY/users-repo:${{ github.sha }} ./services/users
                docker push $ECR_REGISTRY/users-repo:${{ github.sha }}
                ;;
              "frontend")
                docker build \
                  --build-arg REACT_APP_COGNITO_UI="${{ env.COGNITO_UI_LINK }}" \
                  --build-arg REACT_APP_COGNITO_LOGOUT="${{ env.COGNITO_LOGOUT_LINK }}" \
                  -t $ECR_REGISTRY/frontend-repo:${{ github.sha }} \
                  ./fe
                docker push $ECR_REGISTRY/frontend-repo:${{ github.sha }}
                ;;
            esac
          done

      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Update ECS service with new task definition
        run: |
          # Register new task definition
          TASK_DEFINITION=$(aws ecs register-task-definition \
          --family tasknest-frontend-task \
          --network-mode awsvpc \
          --requires-compatibilities "FARGATE" \
          --cpu "256" \
          --memory "512" \
          --execution-role-arn arn:aws:iam::${{ steps.get-aws-account.outputs.account_id }}:role/tasknest-ecs-execution-role \
          --container-definitions "[{\"name\":\"frontend\",\"image\":\"${{ steps.get-aws-account.outputs.account_id }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend-repo:${{ github.sha }}\",\"memory\": 512,\"cpu\": 256,\"essential\":true,\"portMappings\":[{\"containerPort\":80,\"hostPort\":80}],\"environment\":[{\"name\":\"REACT_APP_COGNITO_UI\",\"value\":\"${{ env.COGNITO_UI_LINK }}\"},{\"name\":\"REACT_APP_COGNITO_LOGOUT\",\"value\":\"${{ env.COGNITO_LOGOUT_LINK }}\"}]}]"
          )
          TASK_REVISION=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')
          
          aws ecs update-service \
            --cluster tasknest-ecs-cluster \
            --service tasknest-frontend-service \
            --task-definition $TASK_REVISION \
            --force-new-deployment

          # Register new task definition
          TASK_DEFINITION=$(aws ecs register-task-definition \
            --family tasknest-users-task \
            --network-mode awsvpc \
            --requires-compatibilities "FARGATE" \
            --cpu "256" \
            --memory "512" \
            --execution-role-arn arn:aws:iam::${{ steps.get-aws-account.outputs.account_id }}:role/tasknest-ecs-execution-role \
            --container-definitions "[{\"name\":\"users\",\"image\":\"${{ steps.get-aws-account.outputs.account_id }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/users-repo:${{ github.sha }}\",\"memory\": 512,\"cpu\": 256,\"essential\":true,\"portMappings\":[{\"containerPort\":8080,\"hostPort\":8080}],\"environment\":[{\"name\":\"AWS_REGION\",\"value\":\"${{ secrets.AWS_REGION }}\"}]}]"
          )
          TASK_REVISION=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')
          
          aws ecs update-service \
            --cluster tasknest-ecs-cluster \
            --service tasknest-users-service \
            --task-definition $TASK_REVISION \
            --force-new-deployment

          TASK_DEFINITION=$(aws ecs register-task-definition \
          --family tasknest-tasks-task \
          --network-mode awsvpc \
          --requires-compatibilities "FARGATE" \
          --cpu "256" \
          --memory "512" \
          --execution-role-arn arn:aws:iam::${{ steps.get-aws-account.outputs.account_id }}:role/tasknest-ecs-execution-role \
          --container-definitions "[{\"name\":\"tasks\",\"image\":\"${{ steps.get-aws-account.outputs.account_id }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/tasks-repo:${{ github.sha }}\",\"memory\":512,\"cpu\":256,\"essential\":true,\"portMappings\":[{\"containerPort\":8080,\"hostPort\":8080}],\"environment\":[{\"name\":\"AWS_REGION\",\"value\":\"${{ secrets.AWS_REGION }}\"}]}]"
          )
          
          TASK_REVISION=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')
          
          aws ecs update-service \
            --cluster tasknest-ecs-cluster \
            --service tasknest-tasks-service \
            --task-definition $TASK_REVISION \
            --force-new-deployment
