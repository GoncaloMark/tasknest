on:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

name: Build and Deploy Affected Services
jobs:
  build:
    name: Determine, Build, and Deploy Affected Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Identify Affected Services
        id: affected-services
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files: $CHANGED_FILES"

          # Determine affected services
          AFFECTED_SERVICES=""
          if echo "$CHANGED_FILES" | grep -q "^services/tasks/"; then
            AFFECTED_SERVICES="${AFFECTED_SERVICES} tasks"
          fi
          if echo "$CHANGED_FILES" | grep -q "^services/users/"; then
            AFFECTED_SERVICES="${AFFECTED_SERVICES} users"
          fi
          if echo "$CHANGED_FILES" | grep -q "^fe/"; then
            AFFECTED_SERVICES="${AFFECTED_SERVICES} frontend"
          fi
          if echo "$CHANGED_FILES" | grep -q "^infra/"; then
            AFFECTED_SERVICES="frontend users tasks"
          fi
          if echo "$CHANGED_FILES" | grep -q "^.github/workflows/"; then
            AFFECTED_SERVICES="frontend users tasks"
          fi
          echo "Affected services: $AFFECTED_SERVICES"
          echo "services=$AFFECTED_SERVICES" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Images
        if: contains(env.services, 'tasks') || contains(env.services, 'users') || contains(env.services, 'frontend')
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          for SERVICE in ${{ env.services }}; do
            case $SERVICE in
              "tasks")
                docker build -t $ECR_REGISTRY/tasks-repo:${{ github.sha }} ./services/tasks
                docker push $ECR_REGISTRY/tasks-repo:${{ github.sha }}
                ;;
              "users")
                docker build -t $ECR_REGISTRY/users-repo:${{ github.sha }} ./services/users
                docker push $ECR_REGISTRY/users-repo:${{ github.sha }}
                ;;
              "frontend")
                docker build \
                  --build-arg REACT_APP_COGNITO_UI="${{ env.COGNITO_UI_LINK }}" \
                  --build-arg REACT_APP_COGNITO_LOGOUT="${{ env.COGNITO_LOGOUT_LINK }}" \
                  -t $ECR_REGISTRY/frontend-repo:${{ github.sha }} \
                  ./fe
                docker push $ECR_REGISTRY/frontend-repo:${{ github.sha }}
                ;;
            esac
          done

      - name: Deploy to ECS
        if: contains(env.services, 'tasks') || contains(env.services, 'users') || contains(env.services, 'frontend')
        run: |
          update_service() {
            TASK_DEFINITION=$1
            SERVICE_NAME=$2
            CONTAINER_NAME=$3
            PORT=$4
            REPO_NAME=$5

            # Register a new task definition
            aws ecs register-task-definition \
              --family "$TASK_DEFINITION" \
              --container-definitions "[
                {
                  \"name\": \"$CONTAINER_NAME\",
                  \"image\": \"${{ steps.login-ecr.outputs.registry }}/$REPO_NAME:${{ github.sha }}\",
                  \"portMappings\": [
                    {\"containerPort\": $PORT, \"hostPort\": $PORT}
                  ]
                }
              ]"

            # Update the ECS service
            aws ecs update-service \
              --cluster tasknest-cluster \
              --service "$SERVICE_NAME" \
              --force-new-deployment

            # Wait for the service to stabilize
            aws ecs wait services-stable \
              --cluster tasknest-cluster \
              --services "$SERVICE_NAME"
          }

          for SERVICE in ${{ env.services }}; do
            case $SERVICE in
              "tasks")
                update_service "tasknest-tasks-task" "tasknest-tasks-service" "tasks" 8080 "tasks-repo"
                ;;
              "users")
                update_service "tasknest-users-task" "tasknest-users-service" "users" 8080 "users-repo"
                ;;
              "frontend")
                update_service "tasknest-frontend-task" "tasknest-frontend-service" "frontend" 80 "frontend-repo"
                ;;
            esac
          done
